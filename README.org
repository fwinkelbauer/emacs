#+TITLE: Emacs Configuration
#+STARTUP: content

* Introduction

I am currently running GNU Emacs 25.3.1.

* OS Detection

#+BEGIN_SRC emacs-lisp
(setq fw/is-linux (eq system-type 'gnu/linux)
      fw/is-windows (eq system-type 'windows-nt))
#+END_SRC

* General

Simplify confirmation:

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Reload a file if it changed on disk:

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Disable backup and auto save files:

#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t
      auto-save-default nil)
#+END_SRC

Disable audio bell:

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

Hide startup message and show an empty scratch buffer:

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message nil)
#+END_SRC

Increase the garbage collection threshold:

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

Always start in fullscreen:

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

Make scrolling a little bit smoother:

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Define a function to open the current/root directory in an external file
manager:

#+BEGIN_SRC emacs-lisp
(defun fw/default-or-root-dir ()
  "Returns `magit-toplevel' or `default-directory'."
  (require 'magit)
  (let ((root-dir (magit-toplevel)))
    (expand-file-name (if root-dir
        root-dir
      default-directory))))

(defun fw/linux-thunar ()
  "Opens thunar (Linux XFCE) at `vc-root-dir' or `default-directory'."
  (start-process "thunar" nil "thunar" (fw/default-or-root-dir)))

(defun fw/windows-explorer ()
  "Opens Windows explorer at `vc-root-dir' or `default-directory'."
  (start-process "explorer" nil "explorer" (replace-regexp-in-string "/" "\\\\" (fw/default-or-root-dir))))

(defun fw/native-file-manager ()
  "Opens the OS native file manager at `vc-root-dir' or `default-directory'."
  (interactive)
  (when fw/is-linux
      (fw/linux-thunar))
  (when fw/is-windows
      (fw/windows-explorer)))
#+END_SRC

I'd like to open a shell buffer in either the current directory, or in the root
directory of a project in version control:

#+BEGIN_SRC emacs-lisp
(defun fw/shell ()
  "Opens or dismisses a shell at `vc-root-dir' or `default-directory'."
  (interactive)
  (let ((default-directory (fw/default-or-root-dir))
        (shell-buffer-name (concat "*shell (" (fw/default-or-root-dir) ")*")))
    (if (string= (buffer-name) shell-buffer-name)
        (delete-window)
      (shell shell-buffer-name))))
#+END_SRC

* Server

Start Emacs in server mode:

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+END_SRC

* Text

Prefer UTF-8:

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

Set default line length:

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

Overwrite selected text when typing:

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Ensure that files end with a new line:

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

Mark matching pairs of parentheses:

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

Spaces > Tabs:

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Use single space after a sentence:

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

Delete trailing whitespace on save:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

It's useful to open a file without any encoding:

#+BEGIN_SRC emacs-lisp
(defun fw/find-file-or-find-file-literally ()
  "Kills the current buffer and opens it via `find-file' or`find-file-literally'."
  (interactive)
  (let ((current-file-name buffer-file-name)
        (current-is-literal (string= buffer-file-coding-system "no-conversion")))
    (kill-this-buffer)
    (if current-is-literal
        (find-file current-file-name)
      (find-file-literally current-file-name))))
#+END_SRC

* Styling

Hide toolbar:

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

Set the default font:

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Roboto Mono Medium"
                    :height 120
                    :weight 'normal
                    :width 'normal)
#+END_SRC

Enable column numbers:

#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

Highlight current line:

#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC

* Ibuffer

#+BEGIN_SRC emacs-lisp
(setq-default ibuffer-saved-filter-groups
              `(("Default"
                 ("Temporary" (name . "\*.*\*"))
                 ("Magit" (name . "^magit"))
                 ("Dired" (mode . dired-mode))
                 )))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "Default")))

(setq ibuffer-show-empty-filter-groups nil
      ibuffer-expert t)
#+END_SRC

* Window

By default, ~split-window-vertically~ and ~split-window-horizontally~ display
the current buffer twice. Most of the time I'll change the buffer in the second
window, which is why [[https://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury/][this snippet]] looks really handy:

#+BEGIN_SRC emacs-lisp
(defun fw/vsplit-last-buffer ()
  "Split the selected window into two vertical windows."
  (interactive)
  (split-window-vertically)
  (other-window 1)
  (switch-to-next-buffer))

(defun fw/hsplit-last-buffer ()
  "Split the selected window into two horizontal windows."
  (interactive)
  (split-window-horizontally)
  (other-window 1)
  (switch-to-next-buffer))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun fw/kill-this-buffer ()
  "Kills this buffer and removes this window when split."
  (interactive)
  (kill-this-buffer)
  (when (> (length (window-list)) 1)
      (delete-window)))
#+END_SRC

* Org

General org configuration:

#+BEGIN_SRC emacs-lisp
(require 'org)
(setq org-catch-invisible-edits 'smart
      org-log-into-drawer t)
#+END_SRC

Improve org's source code blocks:

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window
      org-edit-src-content-indentation 0)
#+END_SRC

The calendar should use my native language. The ~calendar-set-date-style~ line
changes the date format in ~%%(diary.anniversary ...)~:

#+BEGIN_SRC emacs-lisp
(require 'calendar)
(calendar-set-date-style 'iso)
(setq calendar-week-start-day 1
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                               "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Jänner" "Februar" "März" "April"
                                 "Mai" "Juni" "Juli" "August" "September"
                                 "Oktober" "November" "Dezember"])

(setq parse-time-months '(("jän" . 1) ("feb" . 2) ("mär" . 3)
                          ("apr" . 4) ("mai" . 5) ("jun" . 6)
                          ("jul" . 7) ("aug" . 8) ("sep" . 9)
                          ("okt" . 10) ("nov" . 11) ("dez" . 12)
                          ("jänner" . 1) ("februar" . 2) ("märz" . 3)
                          ("april" . 4) ("mai" . 5) ("juni" . 6)
                          ("juli" . 7) ("august" . 8)
                          ("september" . 9) ("oktober" . 10)
                          ("november" . 11) ("dezember" . 12)))

(setq parse-time-weekdays '(("so" . 0) ("mo" . 1) ("di" . 2)
                            ("mi" . 3) ("do" . 4) ("fr" . 5)
                            ("sa" . 6) ("sonntag" . 0) ("montag" . 1)
                            ("dienstag" . 2) ("mittwoch" . 3)
                            ("donnerstag" . 4) ("freitag" . 5)
                            ("samstag" . 6)))
#+END_SRC

I've found this snippet of Austrian holidays in [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Void's configuration]]:

#+BEGIN_SRC emacs-lisp
(setq holiday-local-holidays '((holiday-fixed  1  1 "Neujahr (frei)")
                               (holiday-fixed  1  6 "Heilige Drei Könige (frei)")
                               (holiday-easter-etc 1 "Ostermontag (frei)")
                               (holiday-easter-etc -46 "Aschermittwoch")
                               (holiday-easter-etc -2 "Karfreitag")
                               (holiday-fixed  5  1 "Österreichischer Staatsfeiertag (frei)")
                               (holiday-easter-etc 39 "Christi Himmelfahrt (frei)")
                               (holiday-easter-etc 50 "Pfingstmontag (frei)")
                               (holiday-easter-etc 60 "Fronleichnam (frei)")
                               (holiday-fixed  8 15 "Mariä Himmelfahrt (frei)")
                               (holiday-fixed 10 26 "Nationalfeiertag (frei)")
                               (holiday-fixed 11  1 "Allerheiligen (frei)")
                               (holiday-fixed 12  8 "Maria Empfängnis (frei)")
                               (holiday-fixed 12 24 "Heiliger Abend")
                               (holiday-fixed 12 25 "Erster Weihnachtstag (frei)")
                               (holiday-fixed 12 26 "Zweiter Weihnachtstag (frei)")))

(setq calendar-holidays (append holiday-local-holidays holiday-other-holidays))
#+END_SRC

Basic agenda configuration with a custom agenda view:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)

(setq org-agenda-custom-commands
      '(("." "Overview"
         ((agenda ""
                  ((org-agenda-overriding-header "Kalender\n")))
          (todo ""
                ((org-agenda-overriding-header "\nOffen\n")
                 (org-agenda-block-separator nil)
                 (org-agenda-sorting-strategy '(todo-state-up))
                 (org-agenda-todo-ignore-scheduled 'all)))))))

(defun fw/org-agenda ()
  "Show my custom org-agenda."
  (interactive)
  (delete-other-windows)
  (when (boundp 'fw/default-inbox)
      (find-file fw/default-inbox))
  (org-agenda nil "."))
#+END_SRC

I don't want to see repeating TODOs in my calendar. The variable name to change
this behavior is different depending on version of org-mode is running, so I'll
set them both:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-show-future-repeats nil
      org-agenda-repeating-timestamp-show-all nil)
#+END_SRC

Thanks to [[https://www.reddit.com/r/orgmode/comments/fg1im8/calendar_notifications_on_windows_10/][this reddit post]] I can now get calendar notifications using org:

#+BEGIN_SRC emacs-lisp
(require 'appt)
(appt-activate t)

(defun fw/org-agenda-to-appt ()
  "Rebuild all appt reminders using org."
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

(fw/org-agenda-to-appt)
(add-hook 'org-agenda-finalize-hook 'fw/org-agenda-to-appt)
#+END_SRC

* External Packages

** Compilation

I have excluded ~*.elc~ files in this git repository, which is why I need a
function to compile new packages:

#+BEGIN_SRC emacs-lisp
(defun fw/compile-elpa-dir ()
  "Byte-compile all elpa packages."
  (interactive)
  (byte-recompile-directory (concat user-emacs-directory "elpa") 0))
#+END_SRC

** Themes

I like to use [[https://github.com/purcell/color-theme-sanityinc-tomorrow][light themes]]:

#+BEGIN_SRC emacs-lisp
(load-theme 'sanityinc-tomorrow-day t)
#+END_SRC

with just some minor adjustments:

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-agenda-structure nil :inherit 'default :height 1.25)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("CHANGELOG\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
  "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+END_SRC

** Neotree

#+BEGIN_SRC emacs-lisp
(defun fw/neotree-dir ()
  "Open neotree at `vc-root-dir' or `default-directory'."
  (interactive)
  (neotree-dir (fw/default-or-root-dir)))

(setq neo-autorefresh nil)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(setq git-commit-summary-max-length 50
      git-commit-fill-column 72
      magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
#+END_SRC

I'd like to spellcheck my commit messages:

#+BEGIN_SRC emacs-lisp
(add-hook 'git-commit-mode-hook 'flyspell-mode)
#+END_SRC

** Elfeed

Let's extend elfeed's UI so that I can use ~youtube-dl~ to download RSS video
feeds. This snippet is based on code I found [[https://github.com/skeeto/.emacs.d/blob/master/etc/feed-setup.el][here]] and [[https://codingquark.com/emacs/2019/05/16/emacs-elfeed-youtube.html][here]]:

#+BEGIN_SRC emacs-lisp
(require 'elfeed)

(defun fw/youtube-dl (url)
  "Downloads a URL using youtube-dl"
  (async-shell-command (concat "youtube-dl " url)
                       (concat "*youtube-dl " url "*")))

(defun fw/elfeed-search-youtube-dl ()
  "Downloads an elfeed entry using youtube-dl"
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (dolist (entry entries)
      (fw/youtube-dl (elfeed-entry-link entry))
      (elfeed-untag entry 'unread)
      (elfeed-search-update-entry entry)
      (unless (use-region-p) (forward-line)))))

(define-key elfeed-show-mode-map "d" 'fw/elfeed-search-youtube-dl)
(define-key elfeed-search-mode-map "d" 'fw/elfeed-search-youtube-dl)
#+END_SRC

** Ivy, Counsel & Swiper

#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(counsel-mode 1)
(setq ivy-count-format "%d/%d ")
#+END_SRC

[[https://oremacs.com/2019/07/20/ivy-0.12.0/][Ivy 0.12.0]] did add some command extensions such as ~swiper-thing-at-point~,
which are based on ~ivy-thing-at-point~. I'd like to use ~counsel-rg~ through
~ivy-thing-at-point~:

#+BEGIN_SRC emacs-lisp
(defun fw/counsel-rg-thing-at-point ()
  "`counsel-rg' with `ivy-thing-at-point'."
  (interactive)
  (let ((thing (ivy-thing-at-point)))
    (when (use-region-p)
      (deactivate-mark))
    (counsel-rg (regexp-quote thing))))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
(setq company-idle-delay 0.1
      company-minimum-prefix-length 3
      company-show-numbers t)

(global-company-mode t)
#+END_SRC

The dabbrev backend has some inconvenient default settings (e.g. its suggestions
get downcased, even if notations such as camel casing are used):

#+BEGIN_SRC emacs-lisp
(setq company-dabbrev-downcase nil
      company-dabbrev-ignore-case nil)
#+END_SRC

** Doom Modeline

This modeline uses ~all-the-icons~, which can be installed using ~M-x
all-the-icons-install-fonts~.

Alternative: All fonts can be found [[https://github.com/domtronn/all-the-icons.el][here]].

#+BEGIN_SRC emacs-lisp
(doom-modeline-mode 1)
#+END_SRC

Do not show method names in the modeline:

#+BEGIN_SRC emacs-lisp
(setq which-func-modes nil)
#+END_SRC

** PowerShell

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.psm1\\'" . powershell-mode))
(add-to-list 'auto-mode-alist '("\\.psd1\\'" . powershell-mode))
#+END_SRC

** C Sharp

#+BEGIN_SRC emacs-lisp
(defun fw/csharp-mode-setup ()
  (setq c-syntactic-indentation t)
  (c-set-style "ellemtel")
  (setq c-basic-offset 4)
  (setq truncate-lines t))

(add-hook 'csharp-mode-hook 'fw/csharp-mode-setup t)
(add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode))
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
#+END_SRC

* Keybindings

Change keybindings and add new keybindings:

#+BEGIN_SRC emacs-lisp
(defhydra fw/hydra-rectangle (:hint nil
                              :color pink
                              :body-pre (rectangle-mark-mode 1)
                              :post (deactivate-mark))
  "
_i_   Rectangle insert  _q_ Quit
_d_   Rectangle delete
_SPC_ Mark"
  ("i" string-rectangle)
  ("d" delete-rectangle)
  ("SPC" (rectangle-mark-mode 1))
  ("q" nil))

(defhydra fw/hydra-zoom (:hint nil)
  "
_+_ Increase  _0_ Reset  _q_ Quit
_-_ Decrease"
  ("+" text-scale-increase)
  ("-" text-scale-decrease)
  ("0" (text-scale-adjust 0))
  ("q" nil))

(defhydra fw/hydra-main (:hint nil
                         :color blue)
  "
_f_ Find file         _w_ Save buffer       _0_ Delete window         _r_ Rectangle       _q_ Quit
_F_ Find file in git  _k_ Kill this buffer  _1_ Delete other windows  _z_ Zoom
_s_ Search buffer     _b_ Switch buffer     _2_ Split window below    _<return>_ Execute
_S_ Search directory  _B_ Open ibuffer      _3_ Split window right
_g_ Goto line         _h_ Mark all          _o_ Goto other window
_._ Point             ^ ^                   _K_ Kill this window"
  ("f" counsel-find-file)
  ("F" counsel-git)
  ("." fw/hydra-point/body)
  ("s" swiper)
  ("S" counsel-rg)
  ("g" goto-line)
  ("<return>" counsel-M-x)
  ("k" kill-this-buffer)
  ("b" counsel-switch-buffer)
  ("B" ibuffer)
  ("h" mark-whole-buffer)
  ("w" (funcall (key-binding (kbd "C-x C-s"))))
  ("0" delete-window)
  ("1" delete-other-windows)
  ("2" fw/vsplit-last-buffer)
  ("3" fw/hsplit-last-buffer)
  ("o" other-window)
  ("K" fw/kill-this-buffer)
  ("r" fw/hydra-rectangle/body)
  ("z" fw/hydra-zoom/body)
  ("q" nil))

(defhydra fw/hydra-point (:hint nil
                          :color blue)
  "
_s_ Search buffer     _h_ Highlight    _q_ Quit
_S_ Search directory  _u_ Unhighlight"
  ("s" swiper-isearch-thing-at-point)
  ("S" fw/counsel-rg-thing-at-point)
  ("h" highlight-symbol-at-point)
  ("u" unhighlight-regexp)
  ("q" nil))

(global-set-key (kbd "<menu>") 'fw/hydra-main/body)
(global-set-key (kbd "<apps>") 'fw/hydra-main/body)
(global-set-key (kbd "<f5>") 'fw/hydra-main/body)

(global-set-key (kbd "C-z") 'undo)

(global-set-key (kbd "<f8>") 'neotree-toggle)
(global-set-key (kbd "S-<f8>") 'fw/neotree-dir)
(global-set-key (kbd "<f9>") 'fw/shell)
(global-set-key (kbd "S-<f9>") 'fw/native-file-manager)
(global-set-key (kbd "<f10>") 'magit-status)
(global-set-key (kbd "<f11>") 'elfeed)
(global-set-key (kbd "<f12>") 'fw/org-agenda)
#+END_SRC

* Custom

Additional configuration that is only relevant on a particular machine should be
stored in ~/.emacs.d/custom.el~.

#+BEGIN_SRC emacs-lisp
(when (file-exists-p "~/.emacs.d/custom.el")
  (load-file "~/.emacs.d/custom.el"))
#+END_SRC
