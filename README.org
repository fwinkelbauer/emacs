#+TITLE: Emacs Configuration
#+STARTUP: content

* Introduction

Make sure that we are running a newer version of Emacs:

#+begin_src emacs-lisp
(when (version< emacs-version "27.1")
  (error "Unsupported version of Emacs"))
#+end_src

* OS Detection

#+begin_src emacs-lisp
(setq fw/is-linux (eq system-type 'gnu/linux)
      fw/is-windows (eq system-type 'windows-nt))
#+end_src

* General

Simplify confirmation:

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Reload a file if it changed on disk:

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Disable backup, auto save and lock files:

#+begin_src emacs-lisp
(setq backup-inhibited t
      auto-save-default nil
      create-lockfiles nil)
#+end_src

Disable audio bell:

#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

Hide startup message and show an empty scratch buffer:

#+begin_src emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message nil)
#+end_src

Increase the garbage collection threshold:

#+begin_src emacs-lisp
(setq gc-cons-threshold 20000000)
#+end_src

Always start in fullscreen:

#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Make scrolling a little bit smoother:

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+end_src

Start Emacs in server mode:

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

* Text

Prefer UTF-8:

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

Set default line length:

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

Overwrite selected text when typing:

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

Ensure that files end with a new line and contain no trailing whitespace:

#+begin_src emacs-lisp
(setq require-final-newline t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Mark matching pairs of parentheses:

#+begin_src emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+end_src

Spaces > Tabs:

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Use single space after a sentence:

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

* Styling

Hide toolbar:

#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src

Set the default font:

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Roboto Mono Medium"
                    :height 120
                    :weight 'normal
                    :width 'normal)
#+end_src

Enable column numbers:

#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

* Ibuffer

#+begin_src emacs-lisp
(setq-default ibuffer-saved-filter-groups
              `(("Default"
                 ("Temporary" (name . "\*.*\*"))
                 ("Magit" (name . "^magit")))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "Default")))

(setq ibuffer-show-empty-filter-groups nil
      ibuffer-expert t)
#+end_src

* Org

General org configuration:

#+begin_src emacs-lisp
(require 'org)

(setq org-catch-invisible-edits 'smart
      org-log-into-drawer t
      org-capture-bookmark nil)
#+end_src

Improve org's source code blocks:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window
      org-edit-src-content-indentation 0)
#+end_src

The calendar should use my native language. The ~calendar-set-date-style~ line
changes the date format in ~%%(diary.anniversary ...)~:

#+begin_src emacs-lisp
(require 'calendar)

(calendar-set-date-style 'iso)

(setq calendar-week-start-day 1
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                               "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Jänner" "Februar" "März" "April"
                                 "Mai" "Juni" "Juli" "August" "September"
                                 "Oktober" "November" "Dezember"])

(setq parse-time-months '(("jän" . 1) ("feb" . 2) ("mär" . 3)
                          ("apr" . 4) ("mai" . 5) ("jun" . 6)
                          ("jul" . 7) ("aug" . 8) ("sep" . 9)
                          ("okt" . 10) ("nov" . 11) ("dez" . 12)
                          ("jänner" . 1) ("februar" . 2) ("märz" . 3)
                          ("april" . 4) ("mai" . 5) ("juni" . 6)
                          ("juli" . 7) ("august" . 8)
                          ("september" . 9) ("oktober" . 10)
                          ("november" . 11) ("dezember" . 12)))

(setq parse-time-weekdays '(("so" . 0) ("mo" . 1) ("di" . 2)
                            ("mi" . 3) ("do" . 4) ("fr" . 5)
                            ("sa" . 6) ("sonntag" . 0) ("montag" . 1)
                            ("dienstag" . 2) ("mittwoch" . 3)
                            ("donnerstag" . 4) ("freitag" . 5)
                            ("samstag" . 6)))
#+end_src

I've found this snippet of Austrian holidays in [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit's configuration]]:

#+begin_src emacs-lisp
(setq holiday-local-holidays
      '((holiday-fixed  1  1 "Neujahr (frei)")
        (holiday-fixed  1  6 "Heilige Drei Könige (frei)")
        (holiday-easter-etc 1 "Ostermontag (frei)")
        (holiday-easter-etc -46 "Aschermittwoch")
        (holiday-easter-etc -2 "Karfreitag")
        (holiday-fixed  5  1 "Österreichischer Staatsfeiertag (frei)")
        (holiday-easter-etc 39 "Christi Himmelfahrt (frei)")
        (holiday-easter-etc 50 "Pfingstmontag (frei)")
        (holiday-easter-etc 60 "Fronleichnam (frei)")
        (holiday-fixed  8 15 "Mariä Himmelfahrt (frei)")
        (holiday-fixed 10 26 "Nationalfeiertag (frei)")
        (holiday-fixed 11  1 "Allerheiligen (frei)")
        (holiday-fixed 12  8 "Maria Empfängnis (frei)")
        (holiday-fixed 12 24 "Heiliger Abend")
        (holiday-fixed 12 25 "Erster Weihnachtstag (frei)")
        (holiday-fixed 12 26 "Zweiter Weihnachtstag (frei)")))

(setq calendar-holidays (append holiday-local-holidays holiday-other-holidays))
#+end_src

Setup org-capture:

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("i" "Inbox" entry (file org-default-notes-file)
         "* %?" :empty-lines-before 1)))

(defun fw/org-capture-inbox ()
  "Opens my inbox `org-capture' template"
  (interactive)
  (org-capture nil "i"))
#+end_src

Basic agenda configuration with a custom agenda view:

#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)

(setq org-agenda-custom-commands
      '(("." "Overview"
         ((agenda ""
                  ((org-agenda-overriding-header "Kalender\n")
                   (org-agenda-prefix-format "%-2i %-12:c%?-12t% s")
                   (org-agenda-time-grid '((daily today require-timed)
                                           (800 1000 1200 1400 1600 1800 2000)
                                           " ....."
                                           "----------------"))
                   (org-agenda-time-leading-zero t)
                   (org-agenda-current-time-string "****************")
                   (org-agenda-scheduled-leaders '("" ""))))
          (todo ""
                ((org-agenda-overriding-header "\nOffen\n")
                 (org-agenda-block-separator nil)
                 (org-agenda-sorting-strategy '(todo-state-up))
                 (org-agenda-todo-ignore-deadlines 'all)
                 (org-agenda-todo-ignore-scheduled 'all)))))))

(defun fw/org-agenda ()
  "Show my custom org-agenda."
  (interactive)
  (delete-other-windows)
  (find-file org-default-notes-file)
  (org-agenda nil "."))
#+end_src

I don't want to see repeating TODOs in my calendar:

#+begin_src emacs-lisp
(setq org-agenda-show-future-repeats nil)
#+end_src

Define a function to make my org-agenda pretty. Based on [[https://old.reddit.com/r/emacs/comments/hnf3cw/my_orgmode_agenda_much_better_now_with_category/][this reddit post]]:

#+begin_src emacs-lisp
(defun fw/org-agenda-category-icon (category icon)
  "Returns an `org-agenda-category-icon-alist' entry using an
`all-the-icons-material' icon"
  `(,category ,(list (all-the-icons-material icon)) nil nil :ascent center))
#+end_src

* Project

Define a set of functions that operate on the default directory or the
project-current directory:

#+begin_src emacs-lisp
(defun fw/project-current-or-default ()
  "Returns `project-current' or `default-directory'."
  (expand-file-name
   (if (project-current)
       (cdr (project-current))
     default-directory)))

(defun fw/native-file-manager ()
  "Opens the OS native file manager in `fw/project-current-or-default'."
  (interactive)
  (when fw/is-linux
    (call-process "xdg-open" nil 0 nil (fw/project-current-or-default)))
  (when fw/is-windows
    (w32-shell-execute "open" (fw/project-current-or-default))))

(defun fw/find-file ()
  "Finds files in `fw/project-current-or-default'."
  (interactive)
  (if (project-current)
      (project-find-file)
    (consult-find)))

(defun fw/compile ()
  "Run `compile' in `fw/project-current-or-default'."
  (interactive)
  (let ((default-directory (fw/project-current-or-default))
        (compilation-scroll-output t))
    (call-interactively #'compile)))

(defun fw/recompile ()
  "Run `recompile' in `fw/project-current-or-default'."
  (interactive)
  (let ((default-directory (fw/project-current-or-default))
        (compilation-scroll-output t))
    (call-interactively #'recompile)))
#+end_src

* External Packages

** Themes

I like to use [[https://github.com/purcell/color-theme-sanityinc-tomorrow][light themes]]:

#+begin_src emacs-lisp
(load-theme 'sanityinc-tomorrow-day t)
#+end_src

with just some minor adjustments:

#+begin_src emacs-lisp
(set-face-attribute 'org-agenda-structure nil :height 1.25)
(set-face-attribute 'org-agenda-date-today nil :slant 'normal)
#+end_src

** Markdown

#+begin_src emacs-lisp
(autoload 'gfm-mode "markdown-mode"
  "Major mode for editing GitHub Flavored Markdown files" t)

(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
#+end_src

** Magit

#+begin_src emacs-lisp
(require 'magit)

(setq git-commit-summary-max-length 50
      git-commit-fill-column 72
      magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
#+end_src

I'd like to spellcheck my commit messages:

#+begin_src emacs-lisp
(when (executable-find "aspell")
  (add-hook 'git-commit-mode-hook 'flyspell-mode))
#+end_src

Running ~magit-status~ with a prefix argument shows all repositories defined in
~magit-repository-directories~, even if I am already in a git repository. Since
I don't like to press ~C-u~, I'll define a function to do it for me:

#+begin_src emacs-lisp
(defun fw/prefix-magit-status ()
  "Runs C-u `magit-status'"
  (interactive)
  (setq current-prefix-arg '(4))
  (call-interactively 'magit-status))
#+end_src

** Vertico & Orderless

#+begin_src emacs-lisp
(vertico-mode)

(define-key vertico-map "\r" #'vertico-directory-enter)
(define-key vertico-map "\d" #'vertico-directory-delete-char)

(require 'orderless)
(setq completion-styles '(orderless))
#+end_src

** Embark

#+begin_src emacs-lisp
(when fw/is-linux
  (global-set-key (kbd "M-<menu>") 'embark-act))

(when fw/is-windows
  (global-set-key (kbd "M-<apps>") 'embark-act))

(require 'embark-consult)
#+end_src

** Company

#+begin_src emacs-lisp
(setq company-idle-delay 0.1
      company-minimum-prefix-length 3
      company-show-numbers t)

(global-company-mode t)
#+end_src

The dabbrev backend has some inconvenient default settings (e.g. its suggestions
get downcased, even if notations such as camel casing are used):

#+begin_src emacs-lisp
(setq company-dabbrev-downcase nil
      company-dabbrev-ignore-case nil)
#+end_src

** Doom Modeline

This modeline uses ~all-the-icons~, which can be installed by running the
command ~M-x all-the-icons-install-fonts~.

#+begin_src emacs-lisp
(doom-modeline-mode 1)
#+end_src

Do not show method names in the modeline:

#+begin_src emacs-lisp
(setq which-func-modes nil)
#+end_src

** PowerShell

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.psm1\\'" . powershell-mode))
(add-to-list 'auto-mode-alist '("\\.psd1\\'" . powershell-mode))
#+end_src

** C Sharp

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.props\\'" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.editorconfig\\'" . conf-mode))
#+end_src

** Compilation

I have excluded ~*.elc~ files in this git repository, which is why I need to
make sure that all packages are compiled:

#+begin_src emacs-lisp
(byte-recompile-directory package-user-dir 0)
#+end_src

#+begin_src emacs-lisp
(defun fw/reset-emacs ()
 "Resets the Emacs directory to the latest git commit"
 (interactive)
 (let ((default-directory (concat user-emacs-directory "elpa")))
   (shell-command "git clean -dfx -e archives -e gnupg; git reset --hard")))
#+end_src

* Keybindings

A post by [[http://xahlee.info/kbd/whats_the_use_of_the_menu_app_key.html][Xah Lee]] gave me the idea to create alternative keybindings using
transients and the apps/menu key:

#+begin_src emacs-lisp
(defun fw/save ()
  "Runs the keybinding C-x C-s"
  (interactive)
  (funcall (key-binding (kbd "C-x C-s"))))

(defun fw/org-edit ()
  "Runs the keybinding C-c '"
  (interactive)
  (funcall (key-binding (kbd "C-c '"))))

(defun fw/unhiglight-all ()
  "Remove all hi-lock highlighting"
  (interactive)
  (unhighlight-regexp t))

(transient-define-prefix fw/transient-main ()
  "fw/transient-main"
  [["Search"
    ("f" "Find file" find-file)
    ("F" "Find file recursive" fw/find-file)
    ("s" "Search buffer" consult-line)
    ("S" "Search directory" consult-ripgrep)
    ("j" "Goto line" consult-goto-line)
    ("." "Highlight" highlight-symbol-at-point)
    ("c" "Clear" fw/unhiglight-all)]

   ["Buffer"
    ("w" "Save buffer" fw/save)
    ("k" "Kill buffer" kill-this-buffer)
    ("b" "Switch buffer" consult-buffer)
    ("B" "Open ibuffer" ibuffer)
    ("h" "Mark all" mark-whole-buffer)
    ("SPC" "Set mark" set-mark-command)]

   ["Window"
    ("0" "Delete window" delete-window)
    ("1" "Delete other windows" delete-other-windows)
    ("2" "Split window below" split-window-vertically)
    ("3" "Split window right" split-window-horizontally)
    ("<right>" "Right" windmove-right)
    ("<left>" "Left" windmove-left)
    ("<up>" "Up" windmove-up)
    ("<down>" "Down" windmove-down)]

   ["More"
    ("r" "Rectangle" fw/transient-rectangle :transient nil)
    ("g" "Project" fw/transient-project :transient nil)
    ("e" "Elfeed" elfeed)
    ("o" "Org" fw/transient-org :transient nil)
    ("t" "Text" fw/transient-text :transient nil)
    ("y" "Yank" consult-yank-pop)
    ("<return>" "Execute" execute-extended-command)]

   ["Quit"
    ("q" "Quit Emacs" save-buffers-kill-terminal)]])

(transient-define-prefix fw/transient-rectangle ()
  "fw/transient-rectangle"
  [["Rectangle"
    ("r" "Mark" rectangle-mark-mode)
    ("i" "Insert" string-rectangle)
    ("d" "Delete" delete-rectangle)]])

(transient-define-prefix fw/transient-project ()
  "fw/transient-project"
  [["Magit"
    ("g" "Status" magit-status)
    ("o" "Open repository" fw/prefix-magit-status)
    ("d" "Dispatch" magit-dispatch)
    ("f" "File dispatch" magit-file-dispatch)]

   ["Project"
    ("e" "File manager" fw/native-file-manager)
    ("c" "Compile" fw/compile)
    ("r" "Recompile" fw/recompile)]])

(transient-define-prefix fw/transient-org ()
  "fw/transient-org"
  [["Org"
    ("o" "Agenda" fw/org-agenda)
    ("i" "Inbox" fw/org-capture-inbox)
    ("l" "Link" org-insert-link)
    ("t" "Todo" org-todo)
    ("s" "Schedule" org-schedule)
    ("d" "Deadline" org-deadline)
    ("." "Timestamp" org-time-stamp)
    ("#" "Template" org-insert-structure-template)
    ("b" "Source" fw/org-edit)
    ("B" "Babel" org-babel-tangle)]])

(transient-define-prefix fw/transient-text ()
  "fw/transient-text"
  [["Spelling"
    ("t" "Check word" ispell-word)
    ("f" "Flyspell mode" flyspell-mode)
    ("b" "Flyspell buffer" flyspell-buffer)]

   ["Layout"
    ("w" "Whitespace mode" whitespace-mode)]])

(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "<f5>") 'fw/transient-main)

(when fw/is-linux
  (global-set-key (kbd "<menu>") 'fw/transient-main))

(when fw/is-windows
  (global-set-key (kbd "<apps>") 'fw/transient-main))
#+end_src

Change all transients so that I can use q to close them:

#+begin_src emacs-lisp
(transient-bind-q-to-quit)
#+end_src

* Custom

Additional configuration that is only relevant on a particular machine should be
stored in a ~custom.el~ file:

#+begin_src emacs-lisp
(let ((fw/custom-el (concat user-emacs-directory "custom.el")))
  (when (file-exists-p fw/custom-el)
    (load-file fw/custom-el)))
#+end_src
