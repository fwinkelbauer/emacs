#+TITLE: Emacs Configuration
#+STARTUP: content

* Introduction

I am currently running GNU Emacs 27.1.

* OS Detection

#+begin_src emacs-lisp
(setq fw/is-linux (eq system-type 'gnu/linux)
      fw/is-windows (eq system-type 'windows-nt))
#+end_src

* General

Simplify confirmation:

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Reload a file if it changed on disk:

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Disable backup, auto save and lock files:

#+begin_src emacs-lisp
(setq backup-inhibited t
      auto-save-default nil
      create-lockfiles nil)
#+end_src

Disable audio bell:

#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

Hide startup message and show an empty scratch buffer:

#+begin_src emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message nil)
#+end_src

Increase the garbage collection threshold:

#+begin_src emacs-lisp
(setq gc-cons-threshold 20000000)
#+end_src

Always start in fullscreen:

#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

Make scrolling a little bit smoother:

#+begin_src emacs-lisp
(setq mouse-wheel-progressive-speed nil)
#+end_src

* Server

Start Emacs in server mode:

#+begin_src emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+end_src

* Text

Prefer UTF-8:

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
#+end_src

Set default line length:

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

Overwrite selected text when typing:

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

Ensure that files end with a new line:

#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

Mark matching pairs of parentheses:

#+begin_src emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+end_src

Spaces > Tabs:

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Use single space after a sentence:

#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src

Delete trailing whitespace on save:

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

It's useful to open a file without any encoding:

#+begin_src emacs-lisp
(defun fw/find-file-or-find-file-literally ()
  "Kills the current buffer and opens it via `find-file' or`find-file-literally'."
  (interactive)
  (let ((current-file-name buffer-file-name)
        (current-is-literal (string= buffer-file-coding-system "no-conversion")))
    (kill-this-buffer)
    (if current-is-literal
        (find-file current-file-name)
      (find-file-literally current-file-name))))
#+end_src

* Styling

Hide toolbar:

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

Set the default font:

#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :family "Roboto Mono Medium"
                    :height 120
                    :weight 'normal
                    :width 'normal)
#+end_src

Enable column numbers:

#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

Highlight current line:

#+begin_src emacs-lisp
(when window-system
  (global-hl-line-mode))
#+end_src

* Ibuffer

#+begin_src emacs-lisp
(setq-default ibuffer-saved-filter-groups
              `(("Default"
                 ("Temporary" (name . "\*.*\*"))
                 ("Magit" (name . "^magit")))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "Default")))

(setq ibuffer-show-empty-filter-groups nil
      ibuffer-expert t)
#+end_src

* Window

By default, ~split-window-vertically~ and ~split-window-horizontally~ display
the current buffer twice. Most of the time I'll change the buffer in the second
window, which is why [[https://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury/][this snippet]] looks really handy:

#+begin_src emacs-lisp
(defun fw/vsplit-last-buffer ()
  "Split the selected window into two vertical windows."
  (interactive)
  (split-window-vertically)
  (other-window 1)
  (switch-to-next-buffer))

(defun fw/hsplit-last-buffer ()
  "Split the selected window into two horizontal windows."
  (interactive)
  (split-window-horizontally)
  (other-window 1)
  (switch-to-next-buffer))
#+end_src

In a split screen scenario it is sometimes convenient to delete the window while
killing a buffer:

#+begin_src emacs-lisp
(defun fw/kill-this-buffer ()
  "Kills this buffer and removes this window when split."
  (interactive)
  (kill-this-buffer)
  (when (> (length (window-list)) 1)
      (delete-window)))
#+end_src

* Org

General org configuration:

#+begin_src emacs-lisp
(require 'org)
(setq org-catch-invisible-edits 'smart
      org-log-into-drawer t
      org-capture-bookmark nil)
#+end_src

Improve org's source code blocks:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window
      org-edit-src-content-indentation 0)
#+end_src

The calendar should use my native language. The ~calendar-set-date-style~ line
changes the date format in ~%%(diary.anniversary ...)~:

#+begin_src emacs-lisp
(require 'calendar)
(calendar-set-date-style 'iso)
(setq calendar-week-start-day 1
      calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                               "Donnerstag" "Freitag" "Samstag"]
      calendar-month-name-array ["Jänner" "Februar" "März" "April"
                                 "Mai" "Juni" "Juli" "August" "September"
                                 "Oktober" "November" "Dezember"])

(setq parse-time-months '(("jän" . 1) ("feb" . 2) ("mär" . 3)
                          ("apr" . 4) ("mai" . 5) ("jun" . 6)
                          ("jul" . 7) ("aug" . 8) ("sep" . 9)
                          ("okt" . 10) ("nov" . 11) ("dez" . 12)
                          ("jänner" . 1) ("februar" . 2) ("märz" . 3)
                          ("april" . 4) ("mai" . 5) ("juni" . 6)
                          ("juli" . 7) ("august" . 8)
                          ("september" . 9) ("oktober" . 10)
                          ("november" . 11) ("dezember" . 12)))

(setq parse-time-weekdays '(("so" . 0) ("mo" . 1) ("di" . 2)
                            ("mi" . 3) ("do" . 4) ("fr" . 5)
                            ("sa" . 6) ("sonntag" . 0) ("montag" . 1)
                            ("dienstag" . 2) ("mittwoch" . 3)
                            ("donnerstag" . 4) ("freitag" . 5)
                            ("samstag" . 6)))
#+end_src

I've found this snippet of Austrian holidays in [[https://github.com/novoid/dot-emacs/blob/master/config.org][Karl Voit's configuration]]:

#+begin_src emacs-lisp
(setq holiday-local-holidays
      '((holiday-fixed  1  1 "Neujahr (frei)")
        (holiday-fixed  1  6 "Heilige Drei Könige (frei)")
        (holiday-easter-etc 1 "Ostermontag (frei)")
        (holiday-easter-etc -46 "Aschermittwoch")
        (holiday-easter-etc -2 "Karfreitag")
        (holiday-fixed  5  1 "Österreichischer Staatsfeiertag (frei)")
        (holiday-easter-etc 39 "Christi Himmelfahrt (frei)")
        (holiday-easter-etc 50 "Pfingstmontag (frei)")
        (holiday-easter-etc 60 "Fronleichnam (frei)")
        (holiday-fixed  8 15 "Mariä Himmelfahrt (frei)")
        (holiday-fixed 10 26 "Nationalfeiertag (frei)")
        (holiday-fixed 11  1 "Allerheiligen (frei)")
        (holiday-fixed 12  8 "Maria Empfängnis (frei)")
        (holiday-fixed 12 24 "Heiliger Abend")
        (holiday-fixed 12 25 "Erster Weihnachtstag (frei)")
        (holiday-fixed 12 26 "Zweiter Weihnachtstag (frei)")))

(setq calendar-holidays (append holiday-local-holidays holiday-other-holidays))
#+end_src

Setup org-capture:

#+begin_src emacs-lisp
(setq fw/default-inbox "~/org/inbox.org")

(setq org-capture-templates
      '(("i" "Inbox" entry (file fw/default-inbox)
         "* %?" :empty-lines-before 1)))

(defun fw/org-capture-inbox ()
  "Opens my inbox `org-capture' template"
  (interactive)
  (org-capture nil "i"))
#+end_src

Create a function to show a simple diary file:

#+begin_src emacs-lisp
(setq fw/default-diary-directory "~/org/diary")

(defun fw/org-diary ()
  "Opens a diary file with the current date"
  (interactive)
  (find-file (concat (file-name-as-directory fw/default-diary-directory)
                     (format-time-string "%Y-%m-%d") ".org")))
#+end_src

Basic agenda configuration with a custom agenda view:

#+begin_src emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)

(setq org-agenda-custom-commands
      '(("." "Overview"
         ((agenda ""
                  ((org-agenda-overriding-header "Kalender\n")))
          (todo ""
                ((org-agenda-overriding-header "\nOffen\n")
                 (org-agenda-block-separator nil)
                 (org-agenda-sorting-strategy '(todo-state-up))
                 (org-agenda-todo-ignore-deadlines 'all)
                 (org-agenda-todo-ignore-scheduled 'all)))))))

(defun fw/org-agenda ()
  "Show my custom org-agenda."
  (interactive)
  (delete-other-windows)
  (find-file fw/default-inbox)
  (org-agenda nil "."))
#+end_src

I don't want to see repeating TODOs in my calendar. The variable name to change
this behavior is different depending on the current version of org-mode, so I'll
set them both:

#+begin_src emacs-lisp
(setq org-agenda-show-future-repeats nil
      org-agenda-repeating-timestamp-show-all nil)
#+end_src

Thanks to [[https://www.reddit.com/r/orgmode/comments/fg1im8/calendar_notifications_on_windows_10/][this reddit post]] I can now get calendar notifications using org:

#+begin_src emacs-lisp
(require 'appt)
(appt-activate t)

(defun fw/org-agenda-to-appt ()
  "Rebuild all appt reminders using org."
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

(fw/org-agenda-to-appt)
(add-hook 'org-agenda-finalize-hook 'fw/org-agenda-to-appt)
#+end_src

Define a function to make my org-agenda pretty. Based on [[https://old.reddit.com/r/emacs/comments/hnf3cw/my_orgmode_agenda_much_better_now_with_category/][this reddit post]]:

#+begin_src emacs-lisp
(defun fw/org-agenda-category-icon (category icon)
  "Returns an `org-agenda-category-icon-alist' entry using an
`all-the-icons-material' icon"
  `(,category ,(list (all-the-icons-material icon)) nil nil :ascent center))
#+end_src

* Directory/File Functions

Define a function to open the current directory in an external file
manager:

#+begin_src emacs-lisp
(defun fw/linux-thunar ()
  "Opens thunar (Linux XFCE) in `default-directory'."
  (start-process "thunar" nil "thunar" default-directory))

(defun fw/windows-explorer ()
  "Opens Windows explorer in `default-directory'."
  (start-process "explorer" nil "explorer" (replace-regexp-in-string "/" "\\\\" default-directory)))

(defun fw/native-file-manager ()
  "Opens the OS native file manager in `default-directory'."
  (interactive)
  (when fw/is-linux
      (fw/linux-thunar))
  (when fw/is-windows
      (fw/windows-explorer)))
#+end_src

Put the file name of the current buffer onto the clipborad. Adapted from [[https://blog.sumtypeofway.com/posts/emacs-config.html][here]]:

#+begin_src emacs-lisp
(defun fw/buffer-file-name ()
  "Returns the absolute file name of the current buffer"
  (if (equal major-mode 'dired-mode)
      default-directory
    (buffer-file-name)))

(defun fw/copy-to-clipboard (value)
  "Copy `value' to the clipboard and show a `message'."
  (when value
    (kill-new value)
    (message "Copied '%s' to the clipboard" value)))

(defun fw/copy-absolute-buffer-name-to-clipboard ()
  "Copy the absolute file name of the current buffer to the
clipboard."
  (interactive)
  (fw/copy-to-clipboard (fw/buffer-file-name)))

(defun fw/copy-relative-buffer-name-to-clipboard ()
  "Copy the relative file name of the current buffer to the
clipboard."
  (interactive)
  (fw/copy-to-clipboard (file-relative-name (fw/buffer-file-name))))
#+end_src

* Browser Functions

#+begin_src emacs-lisp
(defun fw/browse-query (url name)
  "Search text input using `url'"
  (browse-url
   (concat
    url
    (read-string (concat "Browse " name ": ")))))

(defun fw/browse-leo ()
  "Search text input using https://dict.leo.org"
  (interactive)
  (fw/browse-query
   "https://dict.leo.org/german-english/?side=both&search="
   "dict.leo.org"))

(defun fw/browse-chocolatey ()
  "Search text input using https://chocolatey.org"
  (interactive)
  (fw/browse-query
   "https://community.chocolatey.org/packages?q="
   "chocolatey.org"))
#+end_src

* External Packages

** Compilation

I have excluded ~*.elc~ files in this git repository, which is why I need a
function to compile new packages:

#+begin_src emacs-lisp
(defun fw/compile-elpa-dir ()
  "Byte-compile all elpa packages."
  (interactive)
  (byte-recompile-directory (concat user-emacs-directory "elpa") 0))
#+end_src

** Themes

I like to use [[https://github.com/purcell/color-theme-sanityinc-tomorrow][light themes]]:

#+begin_src emacs-lisp
(load-theme 'sanityinc-tomorrow-day t)
#+end_src

with just some minor adjustments:

#+begin_src emacs-lisp
(set-face-attribute 'org-agenda-structure nil :height 1.25)
(set-face-attribute 'org-agenda-date-today nil :slant 'normal)
#+end_src

** Markdown

#+begin_src emacs-lisp
(autoload 'gfm-mode "markdown-mode"
  "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
#+end_src

** Neotree

#+begin_src emacs-lisp
(defun fw/neotree-dir ()
  "Open neotree in `magit-toplevel' or `default-directory'."
  (interactive)
  (neotree-dir (fw/default-or-root-dir)))

(setq neo-autorefresh nil)
#+end_src

Fix ~neotree-open-file-in-system-application~ on Windows:

#+begin_src emacs-lisp
(when fw/is-windows
  (require 'neotree)
  (defun neotree-open-file-in-system-application ()
    (interactive)
    (shell-command (concat "start " (neo-buffer--get-filename-current-line)))))
#+end_src

** Magit

#+begin_src emacs-lisp
(setq git-commit-summary-max-length 50
      git-commit-fill-column 72
      magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
#+end_src

I'd like to spellcheck my commit messages:

#+begin_src emacs-lisp
(add-hook 'git-commit-mode-hook 'flyspell-mode)
#+end_src

Add a custom function to pull from all repositories:

#+begin_src emacs-lisp
(defun fw/git-pull-all ()
  "Runs `vc-git-pull' for every repository found in `magit-list-repos'"
  (interactive)
  (require 'vc-git)
  (require 'magit)
  (if magit-repository-directories
      (dolist (path (magit-list-repos))
        (let ((default-directory path))
          (vc-git-pull nil)))))
#+end_src

Running ~magit-status~ with a prefix argument shows all repositories defined in
~magit-repository-directories~, even if I am already in a git repository. Since
I don't like to press ~C-u~, I'll define a function to do it for me:

#+begin_src emacs-lisp
(defun fw/prefix-magit-status ()
  "Runs C-u `magit-status'"
  (interactive)
  (setq current-prefix-arg '(4))
  (call-interactively 'magit-status))
#+end_src

I'd like to open a shell buffer in either the current directory, or in the root
directory of a project in version control:

#+begin_src emacs-lisp
(defun fw/default-or-root-dir ()
  "Returns `magit-toplevel' or `default-directory'."
  (require 'magit)
  (let ((root-dir (magit-toplevel)))
    (expand-file-name (if root-dir
        root-dir
      default-directory))))

(defun fw/shell ()
  "Opens or dismisses a shell in `magit-toplevel' or `default-directory'."
  (interactive)
  (let ((default-directory (fw/default-or-root-dir))
        (shell-buffer-name (concat "*shell (" (fw/default-or-root-dir) ")*")))
    (if (string= (buffer-name) shell-buffer-name)
        (delete-window)
      (shell shell-buffer-name))))
#+end_src

Run ~compile~ in the current/root directory:

#+begin_src emacs-lisp
(setq compilation-scroll-output t)

(defun fw/compile ()
  "Run `compile' in `magit-toplevel' or `default-directory'."
  (interactive)
  (let ((default-directory (fw/default-or-root-dir)))
    (call-interactively #'compile))
  (pop-to-buffer (get-buffer "*compilation*")))

(defun fw/recompile ()
  "Run `recompile' in `magit-toplevel' or `default-directory'."
  (interactive)
  (let ((default-directory (fw/default-or-root-dir)))
    (call-interactively #'recompile))
  (pop-to-buffer (get-buffer "*compilation*")))
#+end_src

** Elfeed

Let's extend elfeed's UI so that I can use ~youtube-dl~ to download RSS video
feeds. This snippet is based on code I found [[https://github.com/skeeto/.emacs.d/blob/master/etc/feed-setup.el][here]] and [[https://codingquark.com/emacs/2019/05/16/emacs-elfeed-youtube.html][here]]:

#+begin_src emacs-lisp
(require 'elfeed)

(defun fw/youtube-dl (url)
  "Downloads a URL using youtube-dl"
  (async-shell-command (concat "youtube-dl " url)
                       (concat "*youtube-dl " url "*")))

(defun fw/youtube-dl-prompt ()
  "Prompts the user for an URL to download using youtube-dl"
  (interactive)
  (fw/youtube-dl (read-string "YouTube URL: ")))

(defun fw/elfeed-search-youtube-dl ()
  "Downloads an elfeed entry using youtube-dl"
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (dolist (entry entries)
      (fw/youtube-dl (elfeed-entry-link entry))
      (elfeed-untag entry 'unread)
      (elfeed-search-update-entry entry)
      (unless (use-region-p) (forward-line)))))

(define-key elfeed-show-mode-map "d" 'fw/elfeed-search-youtube-dl)
(define-key elfeed-search-mode-map "d" 'fw/elfeed-search-youtube-dl)
#+end_src

** Ivy, Counsel & Swiper

#+begin_src emacs-lisp
(ivy-mode 1)
(counsel-mode 1)
(setq ivy-count-format "%d/%d ")
#+end_src

[[https://oremacs.com/2019/07/20/ivy-0.12.0/][Ivy 0.12.0]] did add some command extensions such as ~swiper-thing-at-point~,
which are based on ~ivy-thing-at-point~. I'd like to use ~counsel-rg~ through
~ivy-thing-at-point~:

#+begin_src emacs-lisp
(defun fw/counsel-rg-thing-at-point ()
  "`counsel-rg' with `ivy-thing-at-point'."
  (interactive)
  (let ((thing (ivy-thing-at-point)))
    (when (use-region-p)
      (deactivate-mark))
    (counsel-rg (regexp-quote thing))))
#+end_src

** Company

#+begin_src emacs-lisp
(setq company-idle-delay 0.1
      company-minimum-prefix-length 3
      company-show-numbers t)

(global-company-mode t)
#+end_src

The dabbrev backend has some inconvenient default settings (e.g. its suggestions
get downcased, even if notations such as camel casing are used):

#+begin_src emacs-lisp
(setq company-dabbrev-downcase nil
      company-dabbrev-ignore-case nil)
#+end_src

** Doom Modeline

This modeline uses ~all-the-icons~, which can be installed by running the
command ~M-x all-the-icons-install-fonts~.

#+begin_src emacs-lisp
(doom-modeline-mode 1)
#+end_src

Do not show method names in the modeline:

#+begin_src emacs-lisp
(setq which-func-modes nil)
#+end_src

** PowerShell

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.psm1\\'" . powershell-mode))
(add-to-list 'auto-mode-alist '("\\.psd1\\'" . powershell-mode))
#+end_src

** C Sharp

#+begin_src emacs-lisp
(defun fw/csharp-mode-setup ()
  (setq c-syntactic-indentation t)
  (c-set-style "ellemtel")
  (setq c-basic-offset 4)
  (setq truncate-lines t))

(add-hook 'csharp-mode-hook 'fw/csharp-mode-setup t)
(add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode))
#+end_src

* Keybindings

A post by [[http://xahlee.info/kbd/whats_the_use_of_the_menu_app_key.html][Xah Lee]] gave me the idea to create alternative keybindings using
hydras and the apps/menu key:

#+begin_src emacs-lisp
(defhydra fw/hydra-main (:color teal)
  ("f" counsel-find-file "Find file" :column "Search")
  ("F" counsel-git "Find file recursive")
  ("s" swiper "Search buffer")
  ("S" counsel-rg "Search directory")
  ("l" goto-line "Goto line")
  ("w" (funcall (key-binding (kbd "C-x C-s"))) "Save buffer" :column "Buffer")
  ("k" kill-this-buffer "Kill this buffer")
  ("K" fw/kill-this-buffer "Kill this window")
  ("b" counsel-switch-buffer "Switch buffer")
  ("B" ibuffer "Open ibuffer")
  ("h" mark-whole-buffer "Mark all")
  ("0" delete-window "Delete window" :column "Window")
  ("1" delete-other-windows "Delete other windows")
  ("2" fw/vsplit-last-buffer "Split window below")
  ("3" fw/hsplit-last-buffer "Split window right")
  ("<right>" windmove-right "Right")
  ("<left>" windmove-left "Left")
  ("<up>" windmove-up "Up")
  ("<down>" windmove-down "Down")
  ("." fw/hydra-point/body "Point" :column "Hydras")
  ("r" fw/hydra-rectangle/body "Rectangle")
  ("g" fw/hydra-project/body "Project")
  ("e" elfeed "Elfeed")
  ("o" fw/hydra-org/body "Org")
  ("i" fw/hydra-modes/body "Modes")
  ("a" fw/hydra-apps/body "Apps")
  ("SPC" set-mark-command "Set mark" :column "Misc")
  ("<return>" counsel-M-x "Execute")
  ("z" fw/copy-relative-buffer-name-to-clipboard "Copy relative")
  ("Z" fw/copy-absolute-buffer-name-to-clipboard "Copy absolute")
  ("q" nil "Quit" :column "")
  ("Q" save-buffers-kill-terminal "Exit Emacs"))

(defhydra fw/hydra-rectangle (:color teal)
  ("r" (rectangle-mark-mode 1) "Mark" :column "Rectangle")
  ("i" string-rectangle "Insert")
  ("d" delete-rectangle "Delete")
  ("q" nil "Quit" :column ""))

(defhydra fw/hydra-point (:color teal)
  ("s" swiper-isearch-thing-at-point "Search buffer" :column "Search")
  ("S" fw/counsel-rg-thing-at-point "Search directory")
  ("h" highlight-symbol-at-point "Highlight" :column "Highlight")
  ("u" unhighlight-regexp "Unhighlight")
  ("q" nil "Quit" :column ""))

(defhydra fw/hydra-project (:color teal)
  ("g" magit-status "Status" :column "Magit")
  ("o" fw/prefix-magit-status "Open repository")
  ("f" magit-file-dispatch "File dispatch")
  ("p" fw/git-pull-all "Pull all")
  ("s" fw/shell "Shell" :column "Applications")
  ("e" fw/native-file-manager "File manager")
  ("r" fw/recompile "Recompile" :column "Programming")
  ("c" fw/compile "Compile")
  ("t" neotree-toggle "Toggle" :column "Neotree")
  ("d" fw/neotree-dir "Directory")
  ("l" neotree-find "Find")
  ("q" nil "Quit" :column ""))

(defhydra fw/hydra-org (:color teal)
  ("o" fw/org-agenda "Agenda" :column "Org")
  ("i" fw/org-capture-inbox "Inbox")
  ("d" fw/org-diary "Diary")
  ("l" org-insert-link "Link")
  ("t" org-todo "Todo")
  ("s" org-schedule "Schedule")
  ("e" org-deadline "Deadline")
  ("." org-time-stamp "Timestamp")
  ("#" org-insert-structure-template "Template")
  ("b" (funcall (key-binding (kbd "C-c '"))) "Source")
  ("B" org-babel-tangle "Babel")
  ("q" nil "Quit" :column ""))

(defhydra fw/hydra-modes (:color teal)
  ("i" ispell-word "Check word" :column "Spelling")
  ("f" flyspell-mode "Flyspell mode")
  ("b" flyspell-buffer "Flyspell buffer")
  ("w" whitespace-mode "Whitespace mode" :column "Misc")
  ("v" fw/find-file-or-find-file-literally "Open literally")
  ("q" nil "Quit" :column ""))

(defhydra fw/hydra-apps (:color teal)
  ("l" fw/browse-leo "dict.leo.org" :column "Browse")
  ("c" fw/browse-chocolatey "chocolatey.org")
  ("y" fw/youtube-dl-prompt "youtube-dl" :column "Download")
  ("q" nil "Quit" :column ""))

(global-set-key (kbd "<menu>") 'fw/hydra-main/body)
(global-set-key (kbd "<apps>") 'fw/hydra-main/body)
(global-set-key (kbd "<f5>") 'fw/hydra-main/body)

(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-x s") 'save-buffer)
#+end_src

* Custom

Additional configuration that is only relevant on a particular machine should be
stored in a ~custom.el~ file:

#+begin_src emacs-lisp
(when (file-exists-p "~/.emacs.d/custom.el")
  (load-file "~/.emacs.d/custom.el"))
#+end_src
